<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); 

class Experiment {

    public function start_experiment($exp_id)
    {
    	//Basically this function is supposed to create a variable to be stored in the session that 
    	//Preserves any experiment specific data from block to block, i.e stimulus mappings
	
		$CI =& get_instance();
		$exp=$CI->session->userdata('experiments');
		if($exp==false)
		{
			$exp=array();
		}
		else $CI->session->unset_userdata('experiment');
		$rand=false;
		$preserve_mapping=true;

		$CI->load->model('trials_model','tm');
		$exp_settings = $CI->tm->getExpSettings($exp_id);
		if($exp_settings['randomize_stim_mapping']==1)	
		{
			$rand=true;
			if($exp_settings['preserve_stim_mapping']==0)	$preserve_mapping=false;
			if($exp_settings['is_grouped']==1) $is_grouped=true;
			else $is_grouped=false;
		}
		
		$rules=$this->get_image_rules($exp_id,$rand,$is_grouped);		//is grouped is a binary flag to denote grouped stimuli
		
		$exp[$exp_id]=array(
								'stim_pairs'=>$rules,
								'loaded'=>true,
								'preserve'=>$preserve_mapping
								);
		$CI->session->set_userdata('experiments',$exp);
		return true;
								
    }
    
    
    
    function exp_is_loaded($exp_id)
    {
    	//checks to see if experiment has been loaded
		$CI =& get_instance();
		$exps=$CI->session->userdata('experiments');
		if($exps==false) return false;
		elseif(!isset($exps[$exp_id]))return false;
		else return $exps[$exp_id]['loaded'];
    }
    
    function load_image_rules($exp_id,$randomize=false)
	{
		$CI =& get_instance();
		if($this->exp_is_loaded($exp_id)==true)
		{
			
			//load rules from experiment
			$exps=$CI->session->userdata('experiments');
			if($exps[$exp_id]['preserve']==false) $this->get_new_rules($exp_id);		//generates new rules if preserve is false and experiment is already loaded
			return $exps[$exp_id]['stim_pairs'];
		}
		
		else 
		{
			$this->start_experiment($exp_id);		//load experiment into session
			$exps=$CI->session->userdata('experiments');
			return $exps[$exp_id]['stim_pairs'];
			//return $this->get_image_rules($exp_id,$randomize);
		}		
		
		
	}
	
	function get_new_rules($exp_id) {
		//@TODO THIS FUNCTION WILL LOAD A NEW SET OF MAPPING RULES INTO THE 	SESSION IF PRESERVE MAPPING IS FALSE
	}	
	
	function get_image_rules($exp_id,$randomize=false,$grouped=false)				//returns a 1 based array of stim maps
	{
		$CI =& get_instance();
		$CI->load->model('trials_model','tm');
		$rules=$CI->tm->getImageRules($exp_id,$grouped);
		if($randomize==true)
		{
			
			if($grouped==true) $rules=$this->group_randomize($rules);
			else 
			{
				$flag=false;
				if(isset($rules[0]))
				{
					$flag=TRUE;
					$res=$rules[0];
					unset($rules[0]);
					//echo ('</br>WHOO</br>' . var_dump($rules));
				}
				shuffle($rules);			//have to fix this. Does not work if there is a stimulus with id=0
				array_unshift($rules,"");
				if($flag==TRUE)$rules[0]=$res;
				else unset($rules[0]);
				
			}
		}
		//echo var_dump($rules);
		return $rules;
	}
	
	function group_randomize($rules)			//this function changes per experiment for customized stim mapping rules --- returns a 1-based array of stimulus mapping rules
	{

		$flag=FALSE;
		if(isset($rules[0]))
		{
			$flag=TRUE;
			$res=$rules[0][0];
			unset($rules[0]);
			//echo ('</br>WHOO</br>' . var_dump($rules));
		}
		shuffle($rules);
		//echo ('</br>' . var_dump($rules));
		$r=array();
		$r[0]="";
		foreach($rules as $t)
		{
			foreach($t as $rule)
				$r[]=$rule;
		}
		if($flag==TRUE)$r[0]=$res;
		else unset($r[0]);
		
		
		echo var_dump($r);
		return $r;		
		
	}
	
	
	
}

/* End of file experiment.php */
?>