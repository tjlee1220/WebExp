<?php
class Mturk{	
	// Define constants
	
	
	

		 var $AWS_ACCESS_KEY_ID = "AKIAIS4LCAOAQTUHYY6A";
		 var $AWS_SECRET_ACCESS_KEY = "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";
		 var $SERVICE_NAME = "AWSMechanicalTurkRequester";
		 var $SERVICE_VERSION = "2007-03-12";
		 var $operation = "GetAccountBalance";
		 var $timestamp;  // = $this->generate_timestamp(time());
		 var $signature;  // = $this->generate_signature($SERVICE_NAME, $operation, $timestamp, $AWS_SECRET_ACCESS_KEY);
		
		// Construct the request
		var $url; 
		
		public function __construct()
		{
			$this->generate_timestamp(time());
		  $this->generate_signature($this->SERVICE_NAME, $this->operation, $this->timestamp, $this->AWS_SECRET_ACCESS_KEY);
		  $this->url= "http://mechanicalturk.amazonaws.com/onca/xml" . "?Service=" . urlencode($this->SERVICE_NAME)
		  . "&Operation=" . urlencode($this->operation)
		  . "&Version=" . urlencode($this->SERVICE_VERSION)
		  . "&Timestamp=" . urlencode($this->timestamp)
		  . "&AWSAccessKeyId=" . urlencode($this->AWS_ACCESS_KEY_ID)
		  . "&Signature=" . urlencode($this->signature);
		 }
		  
	 
	// Define authentication routines
	function generate_timestamp($time) {
	  $this->timestamp=gmdate("Y-m-d\TH:i:s\\Z", $time);
	}
	
	function hmac_sha1($key, $s) {
	  return pack("H*", sha1((str_pad($key, 64, chr(0x00)) ^ (str_repeat(chr(0x5c), 64))) .
	                         pack("H*", sha1((str_pad($key, 64, chr(0x00)) ^ (str_repeat(chr(0x36), 64))) . $s))));
	}
	
	function generate_signature($service, $operation, $timestamp, $secret_access_key)
	{
	  $string_to_encode = $service . $operation . $timestamp;
	  $hmac = $this->hmac_sha1($secret_access_key, $string_to_encode);
	  $signature = base64_encode($hmac);
	  $this->signature=$signature;
	}
	
	// Check for and print results and errors
	function print_errors($error_nodes) {
	  print "There was an error processing your request:\n";
	  foreach ($error_nodes as $error) {
	    print "  Error code:    " . $error->Code . "\n";
	    print "  Error message: " . $error->Message . "\n";
	  }
	}

	public function balance()
	{
		$xml = simplexml_load_file($this->url);
		if ($xml->OperationRequest->Errors) {
	  		print_errors($xml->OperationRequest->Errors->Error);
		}
		if ($xml->GetAccountBalanceResult->Request && $xml->GetAccountBalanceResult->Request->Errors) {
	 		print_errors($xml->GetAccountBalanceResult->Request->Errors->Error);
		}
		$balance=$xml->GetAccountBalanceResult->AvailableBalance->FormattedPrice;
		return $balance;
	}
}	
?>